###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.9.278/W32 for ARM         04/Feb/2022  12:58:39
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode                        
#    Endian                       =  little
#    Source file                  =
#        C:\Project_data\ECM_data\symax_safetycore\Symax-sri_safetycore_unit_test\symax_sri_app-DQ_Test_6_Relay_Testing\generic_app_GMI\FlexMouse\Drivers\driver_spi1.c
#    Command line                 =
#        -f C:\Users\610126~1\AppData\Local\Temp\EWC1D4.tmp
#        (C:\Project_data\ECM_data\symax_safetycore\Symax-sri_safetycore_unit_test\symax_sri_app-DQ_Test_6_Relay_Testing\generic_app_GMI\FlexMouse\Drivers\driver_spi1.c
#        -D USE_FULL_LL_DRIVER -D STM32G030xx -D USE_HAL_DRIVER -lC
#        C:\Project_data\ECM_data\symax_safetycore\Symax-sri_safetycore_unit_test\symax_sri_app-DQ_Test_6_Relay_Testing\generic_app_GMI\EWARM\generic_app_stm32G030K8Tx\List
#        -o
#        C:\Project_data\ECM_data\symax_safetycore\Symax-sri_safetycore_unit_test\symax_sri_app-DQ_Test_6_Relay_Testing\generic_app_GMI\EWARM\generic_app_stm32G030K8Tx\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.4\arm\inc\c\DLib_Config_Full.h"
#        -I
#        C:\Project_data\ECM_data\symax_safetycore\Symax-sri_safetycore_unit_test\symax_sri_app-DQ_Test_6_Relay_Testing\generic_app_GMI\EWARM/../Inc\\
#        -I
#        C:\Project_data\ECM_data\symax_safetycore\Symax-sri_safetycore_unit_test\symax_sri_app-DQ_Test_6_Relay_Testing\generic_app_GMI\EWARM/../Drivers/STM32G0xx_HAL_Driver/Inc\\
#        -I
#        C:\Project_data\ECM_data\symax_safetycore\Symax-sri_safetycore_unit_test\symax_sri_app-DQ_Test_6_Relay_Testing\generic_app_GMI\EWARM/../Drivers/CMSIS/Device/ST/STM32G0xx/Include\\
#        -I
#        C:\Project_data\ECM_data\symax_safetycore\Symax-sri_safetycore_unit_test\symax_sri_app-DQ_Test_6_Relay_Testing\generic_app_GMI\EWARM/../Drivers/CMSIS/Device/ST/STM32G0xx/Source\\
#        -I
#        C:\Project_data\ECM_data\symax_safetycore\Symax-sri_safetycore_unit_test\symax_sri_app-DQ_Test_6_Relay_Testing\generic_app_GMI\EWARM/../Drivers/CMSIS/Include\\
#        -I
#        C:\Project_data\ECM_data\symax_safetycore\Symax-sri_safetycore_unit_test\symax_sri_app-DQ_Test_6_Relay_Testing\generic_app_GMI\EWARM/../FlexMouse\\
#        -I
#        C:\Project_data\ECM_data\symax_safetycore\Symax-sri_safetycore_unit_test\symax_sri_app-DQ_Test_6_Relay_Testing\generic_app_GMI\EWARM/../FlexMouse/Kernel\\
#        -I
#        C:\Project_data\ECM_data\symax_safetycore\Symax-sri_safetycore_unit_test\symax_sri_app-DQ_Test_6_Relay_Testing\generic_app_GMI\EWARM/../FlexMouse/Drivers\\
#        -I
#        C:\Project_data\ECM_data\symax_safetycore\Symax-sri_safetycore_unit_test\symax_sri_app-DQ_Test_6_Relay_Testing\generic_app_GMI\EWARM/../FlexMouse/Memory\\
#        -I
#        C:\Project_data\ECM_data\symax_safetycore\Symax-sri_safetycore_unit_test\symax_sri_app-DQ_Test_6_Relay_Testing\generic_app_GMI\EWARM/../FlexMouse/Features\\
#        -I
#        C:\Project_data\ECM_data\symax_safetycore\Symax-sri_safetycore_unit_test\symax_sri_app-DQ_Test_6_Relay_Testing\generic_app_GMI\EWARM/../FlexMouse/Regal\\
#        -I
#        C:\Project_data\ECM_data\symax_safetycore\Symax-sri_safetycore_unit_test\symax_sri_app-DQ_Test_6_Relay_Testing\generic_app_GMI\EWARM/../Drivers/STM32G0xx_HAL_Driver/Inc/Legacy\\
#        -On)
#    Locale                       =  C
#    List file                    =
#        C:\Project_data\ECM_data\symax_safetycore\Symax-sri_safetycore_unit_test\symax_sri_app-DQ_Test_6_Relay_Testing\generic_app_GMI\EWARM\generic_app_stm32G030K8Tx\List\driver_spi1.lst
#    Object file                  =
#        C:\Project_data\ECM_data\symax_safetycore\Symax-sri_safetycore_unit_test\symax_sri_app-DQ_Test_6_Relay_Testing\generic_app_GMI\EWARM\generic_app_stm32G030K8Tx\Obj\driver_spi1.o
#    Runtime model:                  
#      __SystemLibrary            =  DLib
#      __dlib_file_descriptor     =  1
#      __dlib_full_locale_support =  1
#      __dlib_version             =  6
#
###############################################################################

C:\Project_data\ECM_data\symax_safetycore\Symax-sri_safetycore_unit_test\symax_sri_app-DQ_Test_6_Relay_Testing\generic_app_GMI\FlexMouse\Drivers\driver_spi1.c
      1          /**
      2            ********************************************************************************************************************************
      3            * @file    drv_spi1.c 
      4            * @author  Logan Schaufler
      5            * @brief   Main Driver function/s for serial protocol with SPI1 hardware
      6            * @details Protocol Modbus
      7            *          To Transmitt data : put data into SPI1SeqMem_Tx, and call this function
      8            *                              SPI_ITConfig(SPI1, SPI_IT_TXE, ENABLE);
      9            ********************************************************************************************************************************
     10            */
     11          
     12          /* Includes --------------------------------------------------------------------------------------------------------------------*/
     13          #include "driver_spi1.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_EnableIRQ(IRQn_Type)
   \                     __NVIC_EnableIRQ: (+1)
   \        0x0   0xB500             PUSH     {LR}
   \        0x2   0x0001             MOVS     R1,R0
   \        0x4   0xB249             SXTB     R1,R1
   \        0x6   0x2900             CMP      R1,#+0
   \        0x8   0xD405             BMI      ??__NVIC_EnableIRQ_0
   \        0xA   0x2101             MOVS     R1,#+1
   \        0xC   0x06C2             LSLS     R2,R0,#+27       ;; ZeroExtS R2,R0,#+27,#+27
   \        0xE   0x0ED2             LSRS     R2,R2,#+27
   \       0x10   0x4091             LSLS     R1,R1,R2
   \       0x12   0x....             LDR      R2,??DataTable10  ;; 0xe000e100
   \       0x14   0x6011             STR      R1,[R2, #+0]
   \                     ??__NVIC_EnableIRQ_0: (+1)
   \       0x16   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_SetPriority(IRQn_Type, uint32_t)
   \                     __NVIC_SetPriority: (+1)
   \        0x0   0xB5F0             PUSH     {R4-R7,LR}
   \        0x2   0x0002             MOVS     R2,R0
   \        0x4   0xB252             SXTB     R2,R2
   \        0x6   0x2A00             CMP      R2,#+0
   \        0x8   0xD41C             BMI      ??__NVIC_SetPriority_0
   \        0xA   0x2203             MOVS     R2,#+3
   \        0xC   0x....             LDR      R3,??DataTable10_1  ;; 0xe000e400
   \        0xE   0x0004             MOVS     R4,R0
   \       0x10   0xB264             SXTB     R4,R4
   \       0x12   0x08A4             LSRS     R4,R4,#+2
   \       0x14   0x2504             MOVS     R5,#+4
   \       0x16   0x436C             MULS     R4,R5,R4
   \       0x18   0x591C             LDR      R4,[R3, R4]
   \       0x1A   0x25FF             MOVS     R5,#+255
   \       0x1C   0x0016             MOVS     R6,R2
   \       0x1E   0x4006             ANDS     R6,R6,R0
   \       0x20   0x2708             MOVS     R7,#+8
   \       0x22   0x437E             MULS     R6,R7,R6
   \       0x24   0x40B5             LSLS     R5,R5,R6
   \       0x26   0x43AC             BICS     R4,R4,R5
   \       0x28   0x018D             LSLS     R5,R1,#+6
   \       0x2A   0xB2ED             UXTB     R5,R5
   \       0x2C   0x4002             ANDS     R2,R2,R0
   \       0x2E   0x2608             MOVS     R6,#+8
   \       0x30   0x4372             MULS     R2,R6,R2
   \       0x32   0x4095             LSLS     R5,R5,R2
   \       0x34   0x4325             ORRS     R5,R5,R4
   \       0x36   0x0002             MOVS     R2,R0
   \       0x38   0xB252             SXTB     R2,R2
   \       0x3A   0x0892             LSRS     R2,R2,#+2
   \       0x3C   0x2404             MOVS     R4,#+4
   \       0x3E   0x4362             MULS     R2,R4,R2
   \       0x40   0x509D             STR      R5,[R3, R2]
   \       0x42   0xE022             B        ??__NVIC_SetPriority_1
   \                     ??__NVIC_SetPriority_0: (+1)
   \       0x44   0x240F             MOVS     R4,#+15
   \       0x46   0x....             LDR      R2,??DataTable10_2  ;; 0xe000ed1c
   \       0x48   0x2303             MOVS     R3,#+3
   \       0x4A   0x0005             MOVS     R5,R0
   \       0x4C   0xB26D             SXTB     R5,R5
   \       0x4E   0x4025             ANDS     R5,R5,R4
   \       0x50   0x3D08             SUBS     R5,R5,#+8
   \       0x52   0x08AD             LSRS     R5,R5,#+2
   \       0x54   0x2604             MOVS     R6,#+4
   \       0x56   0x4375             MULS     R5,R6,R5
   \       0x58   0x0006             MOVS     R6,R0
   \       0x5A   0xB276             SXTB     R6,R6
   \       0x5C   0x4034             ANDS     R4,R4,R6
   \       0x5E   0x3C08             SUBS     R4,R4,#+8
   \       0x60   0x08A4             LSRS     R4,R4,#+2
   \       0x62   0x2604             MOVS     R6,#+4
   \       0x64   0x4374             MULS     R4,R6,R4
   \       0x66   0x5916             LDR      R6,[R2, R4]
   \       0x68   0x27FF             MOVS     R7,#+255
   \       0x6A   0x46BC             MOV      R12,R7
   \       0x6C   0x001C             MOVS     R4,R3
   \       0x6E   0x4004             ANDS     R4,R4,R0
   \       0x70   0x2708             MOVS     R7,#+8
   \       0x72   0x437C             MULS     R4,R7,R4
   \       0x74   0x4667             MOV      R7,R12
   \       0x76   0x40A7             LSLS     R7,R7,R4
   \       0x78   0x43BE             BICS     R6,R6,R7
   \       0x7A   0x018C             LSLS     R4,R1,#+6
   \       0x7C   0xB2E4             UXTB     R4,R4
   \       0x7E   0x4003             ANDS     R3,R3,R0
   \       0x80   0x2708             MOVS     R7,#+8
   \       0x82   0x437B             MULS     R3,R7,R3
   \       0x84   0x409C             LSLS     R4,R4,R3
   \       0x86   0x4334             ORRS     R4,R4,R6
   \       0x88   0x5154             STR      R4,[R2, R5]
   \                     ??__NVIC_SetPriority_1: (+1)
   \       0x8A   0xBDF0             POP      {R4-R7,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_SPI_Enable(SPI_TypeDef *)
   \                     LL_SPI_Enable: (+1)
   \        0x0   0x6801             LDR      R1,[R0, #+0]
   \        0x2   0x2240             MOVS     R2,#+64
   \        0x4   0x430A             ORRS     R2,R2,R1
   \        0x6   0x6002             STR      R2,[R0, #+0]
   \        0x8   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_SPI_SetStandard(SPI_TypeDef *, uint32_t)
   \                     LL_SPI_SetStandard: (+1)
   \        0x0   0x6842             LDR      R2,[R0, #+4]
   \        0x2   0x2310             MOVS     R3,#+16
   \        0x4   0x439A             BICS     R2,R2,R3
   \        0x6   0x430A             ORRS     R2,R2,R1
   \        0x8   0x6042             STR      R2,[R0, #+4]
   \        0xA   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_SPI_SetRxFIFOThreshold(SPI_TypeDef *, uint32_t)
   \                     LL_SPI_SetRxFIFOThreshold: (+1)
   \        0x0   0x6842             LDR      R2,[R0, #+4]
   \        0x2   0x....             LDR      R3,??DataTable10_3  ;; 0xffffefff
   \        0x4   0x4013             ANDS     R3,R3,R2
   \        0x6   0x430B             ORRS     R3,R3,R1
   \        0x8   0x6043             STR      R3,[R0, #+4]
   \        0xA   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *)
   \                     LL_SPI_DisableNSSPulseMgt: (+1)
   \        0x0   0x6841             LDR      R1,[R0, #+4]
   \        0x2   0x2208             MOVS     R2,#+8
   \        0x4   0x4391             BICS     R1,R1,R2
   \        0x6   0x6041             STR      R1,[R0, #+4]
   \        0x8   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *)
   \                     LL_SPI_IsActiveFlag_RXNE: (+1)
   \        0x0   0x6881             LDR      R1,[R0, #+8]
   \        0x2   0x0008             MOVS     R0,R1
   \        0x4   0x07C0             LSLS     R0,R0,#+31       ;; ZeroExtS R0,R0,#+31,#+31
   \        0x6   0x0FC0             LSRS     R0,R0,#+31
   \        0x8   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint32_t LL_SPI_IsActiveFlag_OVR(SPI_TypeDef *)
   \                     LL_SPI_IsActiveFlag_OVR: (+1)
   \        0x0   0x6880             LDR      R0,[R0, #+8]
   \        0x2   0x0981             LSRS     R1,R0,#+6
   \        0x4   0x0008             MOVS     R0,R1
   \        0x6   0x07C0             LSLS     R0,R0,#+31       ;; ZeroExtS R0,R0,#+31,#+31
   \        0x8   0x0FC0             LSRS     R0,R0,#+31
   \        0xA   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_SPI_EnableIT_ERR(SPI_TypeDef *)
   \                     LL_SPI_EnableIT_ERR: (+1)
   \        0x0   0x6841             LDR      R1,[R0, #+4]
   \        0x2   0x2220             MOVS     R2,#+32
   \        0x4   0x430A             ORRS     R2,R2,R1
   \        0x6   0x6042             STR      R2,[R0, #+4]
   \        0x8   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_SPI_EnableIT_RXNE(SPI_TypeDef *)
   \                     LL_SPI_EnableIT_RXNE: (+1)
   \        0x0   0x6841             LDR      R1,[R0, #+4]
   \        0x2   0x2240             MOVS     R2,#+64
   \        0x4   0x430A             ORRS     R2,R2,R1
   \        0x6   0x6042             STR      R2,[R0, #+4]
   \        0x8   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_SPI_DisableIT_RXNE(SPI_TypeDef *)
   \                     LL_SPI_DisableIT_RXNE: (+1)
   \        0x0   0x6841             LDR      R1,[R0, #+4]
   \        0x2   0x2240             MOVS     R2,#+64
   \        0x4   0x4391             BICS     R1,R1,R2
   \        0x6   0x6041             STR      R1,[R0, #+4]
   \        0x8   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_SPI_DisableIT_TXE(SPI_TypeDef *)
   \                     LL_SPI_DisableIT_TXE: (+1)
   \        0x0   0x6841             LDR      R1,[R0, #+4]
   \        0x2   0x2280             MOVS     R2,#+128
   \        0x4   0x4391             BICS     R1,R1,R2
   \        0x6   0x6041             STR      R1,[R0, #+4]
   \        0x8   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *)
   \                     LL_SPI_ReceiveData8: (+1)
   \        0x0   0x68C0             LDR      R0,[R0, #+12]
   \        0x2   0xB2C0             UXTB     R0,R0
   \        0x4   0x4770             BX       LR               ;; return
     14          #include "main.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_APB2_GRP1_EnableClock(uint32_t)
   \                     LL_APB2_GRP1_EnableClock: (+1)
   \        0x0   0xB081             SUB      SP,SP,#+4
   \        0x2   0x....             LDR      R1,??DataTable10_4  ;; 0x40021040
   \        0x4   0x680A             LDR      R2,[R1, #+0]
   \        0x6   0x4302             ORRS     R2,R2,R0
   \        0x8   0x600A             STR      R2,[R1, #+0]
   \        0xA   0x6809             LDR      R1,[R1, #+0]
   \        0xC   0x4001             ANDS     R1,R1,R0
   \        0xE   0x9100             STR      R1,[SP, #+0]
   \       0x10   0x9900             LDR      R1,[SP, #+0]
   \       0x12   0xB001             ADD      SP,SP,#+4
   \       0x14   0x4770             BX       LR               ;; return
     15          #include "macros.h"
     16          #include "stm32g0xx_ll_spi.h"
     17          #include "module_spi1.h"
     18          
     19          #include <stdio.h>
     20          
     21          // #include "module_AutoAck.h"
     22          //#include "stm32g0xx_ll_crc.h"
     23          //#include "stm32g0xx_ll_spi.h"
     24          //#include "stm32g0xx_it.h"
     25          
     26          /* Private variables ---------------------------------------------------------*/
     27          
     28          //SPI1_Control *SPI1Control;
     29          //SPI_HandleTypeDef hspi1;
     30          
     31          void SPI1_TransferError_Callback(void);
     32          //void SPI1_Tx_Callback(void);
     33          void  SPI1_Rx_Callback(void);
     34          void WaitAndCheckEndOfTransfer(void);
     35          void Decode_SPI_Rx_Buffer(uint8_t*);
     36          

   \                                 In section .bss, align 4
     37          uint8_t aRxBuffer[3] = {0,0,0};
   \                     aRxBuffer:
   \        0x0                      DS8 4
     38          //uint8_t aRxBuffer[8] = {0,0,0,0,0,0,0,0};
     39          //uint32_t aRxBuffer[8] = {0};

   \                                 In section .bss, align 1
     40          static uint8_t receive_index = 0;
   \                     receive_index:
   \        0x0                      DS8 1
     41          //uint8_t ubNbDataToReceive = sizeof(aTxBuffer);
     42          
     43          //LS EDIT
     44          //uint8_t aTxBuffer[] = {1,2,3,4,5,6,7,8};
     45          //uint8_t ubNbDataToTransmit = sizeof(aTxBuffer);
     46          //__IO uint8_t TransmitIndex_u8 = 0;
     47          
     48          

   \                                 In section .text, align 2, keep-with-next
     49          void SPI1_Init(void)
     50          {
   \                     SPI1_Init: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
     51            MX_SPI1_Init();
   \        0x2   0x....'....        BL       MX_SPI1_Init
     52          
     53            /* Configure the SPI1 FIFO Threshold */
     54            LL_SPI_SetRxFIFOThreshold(SPI1, LL_SPI_RX_FIFO_TH_QUARTER);
   \        0x6   0x....             LDR      R4,??DataTable10_5  ;; 0x40013000
   \        0x8   0x2180             MOVS     R1,#+128
   \        0xA   0x0149             LSLS     R1,R1,#+5        ;; #+4096
   \        0xC   0x0020             MOVS     R0,R4
   \        0xE   0x....'....        BL       LL_SPI_SetRxFIFOThreshold
     55            
     56             /* Enable SPI1 */
     57            //LL_SPI_Enable(SPI1);  //LS
     58          
     59            /* Configure SPI1 transfer interrupts */
     60            /* Enable TXE   Interrupt */
     61            //LL_SPI_EnableIT_TXE(SPI1);
     62            //LL_SPI_DisableIT_TXE(SPI1);  
     63          
     64            /* Enable RXNE  Interrupt */
     65            LL_SPI_EnableIT_RXNE(SPI1);
   \       0x12   0x0020             MOVS     R0,R4
   \       0x14   0x....'....        BL       LL_SPI_EnableIT_RXNE
     66            
     67            /* Enable SPI1 Error Interrupt */
     68            LL_SPI_EnableIT_ERR(SPI1);
   \       0x18   0x0020             MOVS     R0,R4
   \       0x1A   0x....'....        BL       LL_SPI_EnableIT_ERR
     69          
     70          }
   \       0x1E   0xBD10             POP      {R4,PC}          ;; return
     71          
     72          /**
     73            * @brief SPI1 Initialization Function
     74            * @param None
     75            * @retval None
     76            */

   \                                 In section .text, align 2, keep-with-next
     77          static void MX_SPI1_Init(void)
     78          {
   \                     MX_SPI1_Init: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0xB090             SUB      SP,SP,#+64
   \        0x4   0x2228             MOVS     R2,#+40
   \        0x6   0x2100             MOVS     R1,#+0
   \        0x8   0xA806             ADD      R0,SP,#+24
   \        0xA   0x....'....        BL       memset
   \        0xE   0x2218             MOVS     R2,#+24
   \       0x10   0x2100             MOVS     R1,#+0
   \       0x12   0x4668             MOV      R0,SP
   \       0x14   0x....'....        BL       memset
     79            /* USER CODE BEGIN SPI1_Init 0 */
     80          
     81            /* USER CODE END SPI1_Init 0 */
     82          
     83            LL_SPI_InitTypeDef SPI_InitStruct = {0};
     84          
     85            LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
     86          
     87            /* USER CODE BEGIN SPI1_Init 1 */
     88          
     89            /* USER CODE END SPI1_Init 1 */
     90          
     91            /* Peripheral clock enable */
     92            LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
   \       0x18   0x2080             MOVS     R0,#+128
   \       0x1A   0x0140             LSLS     R0,R0,#+5        ;; #+4096
   \       0x1C   0x....'....        BL       LL_APB2_GRP1_EnableClock
     93          
     94            //LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
     95          
     96            /**/    
     97            GPIO_InitStruct.Pin = SPI1_MISO_Pin;
   \       0x20   0x2040             MOVS     R0,#+64
   \       0x22   0x9000             STR      R0,[SP, #+0]
     98            GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
   \       0x24   0x2402             MOVS     R4,#+2
   \       0x26   0x9401             STR      R4,[SP, #+4]
     99            GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
   \       0x28   0x2500             MOVS     R5,#+0
   \       0x2A   0x9502             STR      R5,[SP, #+8]
    100            GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
   \       0x2C   0x9503             STR      R5,[SP, #+12]
    101            GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
   \       0x2E   0x9504             STR      R5,[SP, #+16]
    102            GPIO_InitStruct.Alternate = SPI1_GPIO_AF;
   \       0x30   0x9505             STR      R5,[SP, #+20]
    103            LL_GPIO_Init(SPI1_MISO_Port, &GPIO_InitStruct);
   \       0x32   0x26A0             MOVS     R6,#+160
   \       0x34   0x05F6             LSLS     R6,R6,#+23       ;; #+1342177280
   \       0x36   0x4669             MOV      R1,SP
   \       0x38   0x0030             MOVS     R0,R6
   \       0x3A   0x....'....        BL       LL_GPIO_Init
    104          
    105            /**/
    106            GPIO_InitStruct.Pin = SPI1_MOSI_Pin;
   \       0x3E   0x2080             MOVS     R0,#+128
   \       0x40   0x9000             STR      R0,[SP, #+0]
    107            GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
   \       0x42   0x9401             STR      R4,[SP, #+4]
    108            GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
   \       0x44   0x9502             STR      R5,[SP, #+8]
    109            GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
   \       0x46   0x9503             STR      R5,[SP, #+12]
    110            GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
   \       0x48   0x9504             STR      R5,[SP, #+16]
    111            GPIO_InitStruct.Alternate = SPI1_GPIO_AF;
   \       0x4A   0x9505             STR      R5,[SP, #+20]
    112            LL_GPIO_Init(SPI1_MOSI_Port, &GPIO_InitStruct);
   \       0x4C   0x4669             MOV      R1,SP
   \       0x4E   0x0030             MOVS     R0,R6
   \       0x50   0x....'....        BL       LL_GPIO_Init
    113            
    114             /**/
    115            GPIO_InitStruct.Pin = SPI1_SCK_Pin;
   \       0x54   0x2008             MOVS     R0,#+8
   \       0x56   0x9000             STR      R0,[SP, #+0]
    116            GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
   \       0x58   0x9401             STR      R4,[SP, #+4]
    117            GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
   \       0x5A   0x9502             STR      R5,[SP, #+8]
    118            GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
   \       0x5C   0x9503             STR      R5,[SP, #+12]
    119            GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
   \       0x5E   0x9504             STR      R5,[SP, #+16]
    120            GPIO_InitStruct.Alternate = SPI1_GPIO_AF;
   \       0x60   0x9505             STR      R5,[SP, #+20]
    121            LL_GPIO_Init(SPI1_SCK_Port, &GPIO_InitStruct);
   \       0x62   0x4669             MOV      R1,SP
   \       0x64   0x....             LDR      R0,??DataTable10_6  ;; 0x50000400
   \       0x66   0x....'....        BL       LL_GPIO_Init
    122          
    123            /* SPI1 interrupt Init */
    124            NVIC_SetPriority(SPI1_IRQn, 1);
   \       0x6A   0x2101             MOVS     R1,#+1
   \       0x6C   0x2019             MOVS     R0,#+25
   \       0x6E   0x....'....        BL       __NVIC_SetPriority
    125            NVIC_EnableIRQ(SPI1_IRQn);
   \       0x72   0x2019             MOVS     R0,#+25
   \       0x74   0x....'....        BL       __NVIC_EnableIRQ
    126            //NVIC_DisableIRQ(SPI1_IRQn);
    127          
    128            /* SPI1 parameter configuration*/
    129            SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
   \       0x78   0x9506             STR      R5,[SP, #+24]
    130            SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
   \       0x7A   0x2082             MOVS     R0,#+130
   \       0x7C   0x0040             LSLS     R0,R0,#+1        ;; #+260
   \       0x7E   0x9007             STR      R0,[SP, #+28]
    131            SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
   \       0x80   0x20E0             MOVS     R0,#+224
   \       0x82   0x00C0             LSLS     R0,R0,#+3        ;; #+1792
   \       0x84   0x9008             STR      R0,[SP, #+32]
    132            SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
   \       0x86   0x9409             STR      R4,[SP, #+36]
    133            SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
   \       0x88   0x2001             MOVS     R0,#+1
   \       0x8A   0x900A             STR      R0,[SP, #+40]
    134            SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
   \       0x8C   0x2080             MOVS     R0,#+128
   \       0x8E   0x0080             LSLS     R0,R0,#+2        ;; #+512
   \       0x90   0x900B             STR      R0,[SP, #+44]
    135            SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV256;    //Baud Rate = 250,000 kBit/sec
   \       0x92   0x2038             MOVS     R0,#+56
   \       0x94   0x900C             STR      R0,[SP, #+48]
    136            SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
   \       0x96   0x950D             STR      R5,[SP, #+52]
    137            SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
   \       0x98   0x950E             STR      R5,[SP, #+56]
    138            SPI_InitStruct.CRCPoly = 7;
   \       0x9A   0x2007             MOVS     R0,#+7
   \       0x9C   0x900F             STR      R0,[SP, #+60]
    139            LL_SPI_Init(SPI1, &SPI_InitStruct);
   \       0x9E   0x....             LDR      R4,??DataTable10_5  ;; 0x40013000
   \       0xA0   0xA906             ADD      R1,SP,#+24
   \       0xA2   0x0020             MOVS     R0,R4
   \       0xA4   0x....'....        BL       LL_SPI_Init
    140            LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
   \       0xA8   0x2100             MOVS     R1,#+0
   \       0xAA   0x0020             MOVS     R0,R4
   \       0xAC   0x....'....        BL       LL_SPI_SetStandard
    141            LL_SPI_DisableNSSPulseMgt(SPI1);
   \       0xB0   0x0020             MOVS     R0,R4
   \       0xB2   0x....'....        BL       LL_SPI_DisableNSSPulseMgt
    142            
    143            /* USER CODE BEGIN SPI1_Init 2 */
    144          
    145            /* USER CODE END SPI1_Init 2 */
    146          
    147          }
   \       0xB6   0xB010             ADD      SP,SP,#+64
   \       0xB8   0xBD70             POP      {R4-R6,PC}       ;; return
    148          

   \                                 In section .text, align 2, keep-with-next
    149          void SPI1_Interrupt_Handler(void)
    150          {
   \                     SPI1_Interrupt_Handler: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    151            /* Check RXNE flag value in ISR register */
    152            if(LL_SPI_IsActiveFlag_RXNE(SPI1))
   \        0x2   0x....             LDR      R4,??DataTable10_5  ;; 0x40013000
   \        0x4   0x0020             MOVS     R0,R4
   \        0x6   0x....'....        BL       LL_SPI_IsActiveFlag_RXNE
   \        0xA   0x2800             CMP      R0,#+0
   \        0xC   0xD002             BEQ      ??SPI1_Interrupt_Handler_0
    153            {
    154              /* Call function Slave Reception Callback */
    155              SPI1_Rx_Callback();
   \        0xE   0x....'....        BL       SPI1_Rx_Callback
   \       0x12   0xE006             B        ??SPI1_Interrupt_Handler_1
    156            }
    157            // /* LS NOT NEEDED IF THIS MICRO IS IN MASTER MODE Check RXNE flag value in ISR register */
    158            // else if(LL_SPI_IsActiveFlag_TXE(SPI1))
    159            // {
    160            //   /* Call function Slave Reception Callback */
    161            //   SPI1_Tx_Callback();
    162            // }
    163          
    164            /* Check STOP flag value in ISR register */
    165            else if(LL_SPI_IsActiveFlag_OVR(SPI1))
   \                     ??SPI1_Interrupt_Handler_0: (+1)
   \       0x14   0x0020             MOVS     R0,R4
   \       0x16   0x....'....        BL       LL_SPI_IsActiveFlag_OVR
   \       0x1A   0x2800             CMP      R0,#+0
   \       0x1C   0xD001             BEQ      ??SPI1_Interrupt_Handler_1
    166            {
    167              /* Call Error function */
    168              SPI1_TransferError_Callback();
   \       0x1E   0x....'....        BL       SPI1_TransferError_Callback
    169            }
    170          }
   \                     ??SPI1_Interrupt_Handler_1: (+1)
   \       0x22   0xBD10             POP      {R4,PC}          ;; return
    171          
    172          /**
    173            * @brief  Function called from SPI1 IRQ Handler when TXE flag is set
    174            *         Function is in charge  to transmit byte on SPI lines.
    175            * @param  None
    176            * @retval None
    177            */
    178          // void SPI1_Tx_Callback(void)
    179          // {
    180            /* Write character in Data register.
    181            TXE flag is cleared by reading data in DR register */
    182          
    183          //}
    184          
    185          /**
    186            * @brief  Function called in case of error detected in SPI IT Handler
    187            * @param  None
    188            * @retval None
    189            */

   \                                 In section .text, align 2, keep-with-next
    190          void SPI1_TransferError_Callback(void)
    191          {
   \                     SPI1_TransferError_Callback: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    192            /* Disable RXNE  Interrupt             */
    193            LL_SPI_DisableIT_RXNE(SPI1);
   \        0x2   0x....             LDR      R4,??DataTable10_5  ;; 0x40013000
   \        0x4   0x0020             MOVS     R0,R4
   \        0x6   0x....'....        BL       LL_SPI_DisableIT_RXNE
    194          
    195            /* Disable TXE   Interrupt             */
    196            LL_SPI_DisableIT_TXE(SPI1);
   \        0xA   0x0020             MOVS     R0,R4
   \        0xC   0x....'....        BL       LL_SPI_DisableIT_TXE
    197          }
   \       0x10   0xBD10             POP      {R4,PC}          ;; return
    198          
    199          /**
    200            * @brief  Function called in case of error detected in SPI IT Handler
    201            * @param  None
    202            * @retval None
    203            */

   \                                 In section .text, align 2, keep-with-next
    204          void TransferHandler(void)
    205          {
   \                     TransferHandler: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    206            LL_SPI_Enable(SPI1);
   \        0x2   0x....             LDR      R0,??DataTable10_5  ;; 0x40013000
   \        0x4   0x....'....        BL       LL_SPI_Enable
    207            WaitAndCheckEndOfTransfer();
   \        0x8   0x....'....        BL       WaitAndCheckEndOfTransfer
    208          }
   \        0xC   0xBD01             POP      {R0,PC}          ;; return
    209          
    210          /**
    211            * @brief  Wait end of transfer and check if received Data are well.
    212            * @param  None
    213            * @retval None
    214            */

   \                                 In section .text, align 2, keep-with-next
    215          void WaitAndCheckEndOfTransfer(void)
    216          {
   \                     WaitAndCheckEndOfTransfer: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    217            // /* 1 - Wait end of transmission */
    218            //while (TransmitIndex_u8 != ubNbDataToTransmit)
    219            //while (test_index != ubNbDataToTransmit) 
    220            //{
    221            //}
    222            /* Disable TXE Interrupt */
    223            LL_SPI_DisableIT_TXE(SPI1);
   \        0x2   0x....             LDR      R4,??DataTable10_5  ;; 0x40013000
   \        0x4   0x0020             MOVS     R0,R4
   \        0x6   0x....'....        BL       LL_SPI_DisableIT_TXE
    224          
    225            /* 2 - Wait end of reception */
    226            //while (ubNbDataToReceive > ubReceiveIndex)
    227            //{
    228            //}
    229            /* Disable RXNE Interrupt */
    230            LL_SPI_DisableIT_RXNE(SPI1);
   \        0xA   0x0020             MOVS     R0,R4
   \        0xC   0x....'....        BL       LL_SPI_DisableIT_RXNE
    231          
    232            // /* 3 - Compare Transmit data to receive data */
    233            // if(Buffercmp8((uint8_t*)aTxBuffer, (uint8_t*)aRxBuffer, ubNbDataToTransmit))
    234            // {
    235            //   /* Processing Error */
    236            //   //LED_Blinking(LED_BLINK_ERROR);  //LS COMEBACK
    237            // }
    238            // else
    239            // {
    240            // }
    241          }
   \       0x10   0xBD10             POP      {R4,PC}          ;; return
    242              
    243          /**
    244            * @brief  Function called from SPI1 IRQ Handler when RXNE flag is set
    245            *         Function is in charge of retrieving received byte from SPI lines.
    246            * @param  None
    247            * @retval None
    248            */

   \                                 In section .text, align 2, keep-with-next
    249          void  SPI1_Rx_Callback(void)
    250          {
   \                     SPI1_Rx_Callback: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    251            /* Read character in Data register.
    252            RXNE flag is cleared by reading data in DR register */
    253            aRxBuffer[receive_index] = LL_SPI_ReceiveData8(SPI1);
   \        0x2   0x....             LDR      R0,??DataTable10_5  ;; 0x40013000
   \        0x4   0x....'....        BL       LL_SPI_ReceiveData8
   \        0x8   0x0001             MOVS     R1,R0
   \        0xA   0x....             LDR      R4,??DataTable10_7
   \        0xC   0x....             LDR      R0,??DataTable10_8
   \        0xE   0x7822             LDRB     R2,[R4, #+0]
   \       0x10   0x5481             STRB     R1,[R0, R2]
    254            receive_index++;
   \       0x12   0x7821             LDRB     R1,[R4, #+0]
   \       0x14   0x1C49             ADDS     R1,R1,#+1
   \       0x16   0x7021             STRB     R1,[R4, #+0]
    255            if(aRxBuffer[0] == 0x55)  //Only accept 0x55 Master sync byte
   \       0x18   0x7801             LDRB     R1,[R0, #+0]
   \       0x1A   0x2955             CMP      R1,#+85
   \       0x1C   0xD107             BNE      ??SPI1_Rx_Callback_0
    256            {
    257              if(receive_index == sizeof(aRxBuffer)) //FUTURE COME UP WITH METHODOLOGY FOR MESSAGES THAT ARE LONGER THAN 3 BYTES
   \       0x1E   0x7821             LDRB     R1,[R4, #+0]
   \       0x20   0x2903             CMP      R1,#+3
   \       0x22   0xD110             BNE      ??SPI1_Rx_Callback_1
    258              {
    259                Decode_SPI_Rx_Buffer(aRxBuffer);
   \       0x24   0x....'....        BL       Decode_SPI_Rx_Buffer
    260                receive_index = 0;
   \       0x28   0x2000             MOVS     R0,#+0
   \       0x2A   0x7020             STRB     R0,[R4, #+0]
   \       0x2C   0xE00B             B        ??SPI1_Rx_Callback_1
    261              }
    262            }
    263            else //Clear anything that does not have Master sync byte
    264            {
    265              receive_index = 0;
   \                     ??SPI1_Rx_Callback_0: (+1)
   \       0x2E   0x2100             MOVS     R1,#+0
   \       0x30   0x7021             STRB     R1,[R4, #+0]
    266              for(uint8_t clearing_index = 0; clearing_index < sizeof(aRxBuffer); clearing_index++)
   \       0x32   0x000A             MOVS     R2,R1
   \                     ??SPI1_Rx_Callback_2: (+1)
   \       0x34   0x0013             MOVS     R3,R2
   \       0x36   0xB2DB             UXTB     R3,R3
   \       0x38   0x2B03             CMP      R3,#+3
   \       0x3A   0xD204             BCS      ??SPI1_Rx_Callback_1
    267              {
    268                aRxBuffer[clearing_index] = 0;
   \       0x3C   0x0013             MOVS     R3,R2
   \       0x3E   0xB2DB             UXTB     R3,R3
   \       0x40   0x54C1             STRB     R1,[R0, R3]
    269              }
   \       0x42   0x1C52             ADDS     R2,R2,#+1
   \       0x44   0xE7F6             B        ??SPI1_Rx_Callback_2
    270            }
    271            
    272          }
   \                     ??SPI1_Rx_Callback_1: (+1)
   \       0x46   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \        0x0   0xE000'E100        DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \        0x0   0xE000'E400        DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \        0x0   0xE000'ED1C        DC32     0xe000ed1c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \        0x0   0xFFFF'EFFF        DC32     0xffffefff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \        0x0   0x4002'1040        DC32     0x40021040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \        0x0   0x4001'3000        DC32     0x40013000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_6:
   \        0x0   0x5000'0400        DC32     0x50000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_7:
   \        0x0   0x....'....        DC32     receive_index

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_8:
   \        0x0   0x....'....        DC32     aRxBuffer

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   LL_APB2_GRP1_EnableClock
       0   LL_SPI_DisableIT_RXNE
       0   LL_SPI_DisableIT_TXE
       0   LL_SPI_DisableNSSPulseMgt
       0   LL_SPI_Enable
       0   LL_SPI_EnableIT_ERR
       0   LL_SPI_EnableIT_RXNE
       0   LL_SPI_IsActiveFlag_OVR
       0   LL_SPI_IsActiveFlag_RXNE
       0   LL_SPI_ReceiveData8
       0   LL_SPI_SetRxFIFOThreshold
       0   LL_SPI_SetStandard
      80   MX_SPI1_Init
        80   -> LL_APB2_GRP1_EnableClock
        80   -> LL_GPIO_Init
        80   -> LL_SPI_DisableNSSPulseMgt
        80   -> LL_SPI_Init
        80   -> LL_SPI_SetStandard
        80   -> __NVIC_EnableIRQ
        80   -> __NVIC_SetPriority
        80   -> memset
       8   SPI1_Init
         8   -> LL_SPI_EnableIT_ERR
         8   -> LL_SPI_EnableIT_RXNE
         8   -> LL_SPI_SetRxFIFOThreshold
         8   -> MX_SPI1_Init
       8   SPI1_Interrupt_Handler
         8   -> LL_SPI_IsActiveFlag_OVR
         8   -> LL_SPI_IsActiveFlag_RXNE
         8   -> SPI1_Rx_Callback
         8   -> SPI1_TransferError_Callback
       8   SPI1_Rx_Callback
         8   -> Decode_SPI_Rx_Buffer
         8   -> LL_SPI_ReceiveData8
       8   SPI1_TransferError_Callback
         8   -> LL_SPI_DisableIT_RXNE
         8   -> LL_SPI_DisableIT_TXE
       8   TransferHandler
         8   -> LL_SPI_Enable
         8   -> WaitAndCheckEndOfTransfer
       8   WaitAndCheckEndOfTransfer
         8   -> LL_SPI_DisableIT_RXNE
         8   -> LL_SPI_DisableIT_TXE
       4   __NVIC_EnableIRQ
      20   __NVIC_SetPriority


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_2
       4  ??DataTable10_3
       4  ??DataTable10_4
       4  ??DataTable10_5
       4  ??DataTable10_6
       4  ??DataTable10_7
       4  ??DataTable10_8
      22  LL_APB2_GRP1_EnableClock
      10  LL_SPI_DisableIT_RXNE
      10  LL_SPI_DisableIT_TXE
      10  LL_SPI_DisableNSSPulseMgt
      10  LL_SPI_Enable
      10  LL_SPI_EnableIT_ERR
      10  LL_SPI_EnableIT_RXNE
      12  LL_SPI_IsActiveFlag_OVR
      10  LL_SPI_IsActiveFlag_RXNE
       6  LL_SPI_ReceiveData8
      12  LL_SPI_SetRxFIFOThreshold
      12  LL_SPI_SetStandard
     186  MX_SPI1_Init
      32  SPI1_Init
      36  SPI1_Interrupt_Handler
      72  SPI1_Rx_Callback
      18  SPI1_TransferError_Callback
      14  TransferHandler
      18  WaitAndCheckEndOfTransfer
      24  __NVIC_EnableIRQ
     140  __NVIC_SetPriority
       4  aRxBuffer
       1  receive_index

 
   5 bytes in section .bss
 710 bytes in section .text
 
 710 bytes of CODE memory
   5 bytes of DATA memory

Errors: none
Warnings: none
