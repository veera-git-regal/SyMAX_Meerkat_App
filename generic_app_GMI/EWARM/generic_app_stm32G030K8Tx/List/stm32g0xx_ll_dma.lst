###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.9.278/W32 for ARM         04/Feb/2022  12:58:57
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\Project_data\ECM_data\symax_safetycore\Symax-sri_safetycore_unit_test\symax_sri_app-DQ_Test_6_Relay_Testing\generic_app_GMI\Drivers\STM32G0xx_HAL_Driver\Src\stm32g0xx_ll_dma.c
#    Command line      =
#        -f C:\Users\610126~1\AppData\Local\Temp\EWB7B.tmp
#        (C:\Project_data\ECM_data\symax_safetycore\Symax-sri_safetycore_unit_test\symax_sri_app-DQ_Test_6_Relay_Testing\generic_app_GMI\Drivers\STM32G0xx_HAL_Driver\Src\stm32g0xx_ll_dma.c
#        -D USE_FULL_LL_DRIVER -D STM32G030xx -D USE_HAL_DRIVER -lC
#        C:\Project_data\ECM_data\symax_safetycore\Symax-sri_safetycore_unit_test\symax_sri_app-DQ_Test_6_Relay_Testing\generic_app_GMI\EWARM\generic_app_stm32G030K8Tx\List
#        -o
#        C:\Project_data\ECM_data\symax_safetycore\Symax-sri_safetycore_unit_test\symax_sri_app-DQ_Test_6_Relay_Testing\generic_app_GMI\EWARM\generic_app_stm32G030K8Tx\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.4\arm\inc\c\DLib_Config_Full.h"
#        -I
#        C:\Project_data\ECM_data\symax_safetycore\Symax-sri_safetycore_unit_test\symax_sri_app-DQ_Test_6_Relay_Testing\generic_app_GMI\EWARM/../Inc\\
#        -I
#        C:\Project_data\ECM_data\symax_safetycore\Symax-sri_safetycore_unit_test\symax_sri_app-DQ_Test_6_Relay_Testing\generic_app_GMI\EWARM/../Drivers/STM32G0xx_HAL_Driver/Inc\\
#        -I
#        C:\Project_data\ECM_data\symax_safetycore\Symax-sri_safetycore_unit_test\symax_sri_app-DQ_Test_6_Relay_Testing\generic_app_GMI\EWARM/../Drivers/CMSIS/Device/ST/STM32G0xx/Include\\
#        -I
#        C:\Project_data\ECM_data\symax_safetycore\Symax-sri_safetycore_unit_test\symax_sri_app-DQ_Test_6_Relay_Testing\generic_app_GMI\EWARM/../Drivers/CMSIS/Device/ST/STM32G0xx/Source\\
#        -I
#        C:\Project_data\ECM_data\symax_safetycore\Symax-sri_safetycore_unit_test\symax_sri_app-DQ_Test_6_Relay_Testing\generic_app_GMI\EWARM/../Drivers/CMSIS/Include\\
#        -I
#        C:\Project_data\ECM_data\symax_safetycore\Symax-sri_safetycore_unit_test\symax_sri_app-DQ_Test_6_Relay_Testing\generic_app_GMI\EWARM/../FlexMouse\\
#        -I
#        C:\Project_data\ECM_data\symax_safetycore\Symax-sri_safetycore_unit_test\symax_sri_app-DQ_Test_6_Relay_Testing\generic_app_GMI\EWARM/../FlexMouse/Kernel\\
#        -I
#        C:\Project_data\ECM_data\symax_safetycore\Symax-sri_safetycore_unit_test\symax_sri_app-DQ_Test_6_Relay_Testing\generic_app_GMI\EWARM/../FlexMouse/Drivers\\
#        -I
#        C:\Project_data\ECM_data\symax_safetycore\Symax-sri_safetycore_unit_test\symax_sri_app-DQ_Test_6_Relay_Testing\generic_app_GMI\EWARM/../FlexMouse/Memory\\
#        -I
#        C:\Project_data\ECM_data\symax_safetycore\Symax-sri_safetycore_unit_test\symax_sri_app-DQ_Test_6_Relay_Testing\generic_app_GMI\EWARM/../FlexMouse/Features\\
#        -I
#        C:\Project_data\ECM_data\symax_safetycore\Symax-sri_safetycore_unit_test\symax_sri_app-DQ_Test_6_Relay_Testing\generic_app_GMI\EWARM/../FlexMouse/Regal\\
#        -I
#        C:\Project_data\ECM_data\symax_safetycore\Symax-sri_safetycore_unit_test\symax_sri_app-DQ_Test_6_Relay_Testing\generic_app_GMI\EWARM/../Drivers/STM32G0xx_HAL_Driver/Inc/Legacy\\
#        -On)
#    Locale            =  C
#    List file         =
#        C:\Project_data\ECM_data\symax_safetycore\Symax-sri_safetycore_unit_test\symax_sri_app-DQ_Test_6_Relay_Testing\generic_app_GMI\EWARM\generic_app_stm32G030K8Tx\List\stm32g0xx_ll_dma.lst
#    Object file       =
#        C:\Project_data\ECM_data\symax_safetycore\Symax-sri_safetycore_unit_test\symax_sri_app-DQ_Test_6_Relay_Testing\generic_app_GMI\EWARM\generic_app_stm32G030K8Tx\Obj\stm32g0xx_ll_dma.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\Project_data\ECM_data\symax_safetycore\Symax-sri_safetycore_unit_test\symax_sri_app-DQ_Test_6_Relay_Testing\generic_app_GMI\Drivers\STM32G0xx_HAL_Driver\Src\stm32g0xx_ll_dma.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32g0xx_ll_dma.c
      4            * @author  MCD Application Team
      5            * @brief   DMA LL module driver.
      6            ******************************************************************************
      7            * @attention
      8            *
      9            * <h2><center>&copy; Copyright (c) 2018 STMicroelectronics. 
     10            * All rights reserved.</center></h2>
     11            *
     12            * This software component is licensed by ST under BSD 3-Clause license,
     13            * the "License"; You may not use this file except in compliance with the 
     14            * License. You may obtain a copy of the License at:
     15            *                        opensource.org/licenses/BSD-3-Clause
     16            *
     17            ******************************************************************************
     18            */
     19          #if defined(USE_FULL_LL_DRIVER)
     20          
     21          /* Includes ------------------------------------------------------------------*/
     22          #include "stm32g0xx_ll_dma.h"

   \                                 In section .rodata, align 4
   \   static __absolute uint8_t const CHANNEL_OFFSET_TAB[5]
   \                     CHANNEL_OFFSET_TAB:
   \        0x0   0x08 0x1C          DC8 8, 28, 48, 68, 88

   \              0x30 0x44    

   \              0x58
   \        0x5                      DS8 3

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_DMA_ConfigTransfer(DMA_TypeDef *, uint32_t, uint32_t)
   \                     LL_DMA_ConfigTransfer: (+1)
   \        0x0   0xB470             PUSH     {R4-R6}
   \        0x2   0x0003             MOVS     R3,R0
   \        0x4   0x....             LDR      R5,??DataTable7
   \        0x6   0x186C             ADDS     R4,R5,R1
   \        0x8   0x1E64             SUBS     R4,R4,#+1
   \        0xA   0x7824             LDRB     R4,[R4, #+0]
   \        0xC   0x191C             ADDS     R4,R3,R4
   \        0xE   0x186D             ADDS     R5,R5,R1
   \       0x10   0x1E6D             SUBS     R5,R5,#+1
   \       0x12   0x782D             LDRB     R5,[R5, #+0]
   \       0x14   0x195D             ADDS     R5,R3,R5
   \       0x16   0x682D             LDR      R5,[R5, #+0]
   \       0x18   0x....             LDR      R6,??DataTable7_1  ;; 0xffff800f
   \       0x1A   0x402E             ANDS     R6,R6,R5
   \       0x1C   0x4316             ORRS     R6,R6,R2
   \       0x1E   0x6026             STR      R6,[R4, #+0]
   \       0x20   0xBC70             POP      {R4-R6}
   \       0x22   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_DMA_SetDataLength(DMA_TypeDef *, uint32_t, uint32_t)
   \                     LL_DMA_SetDataLength: (+1)
   \        0x0   0xB430             PUSH     {R4,R5}
   \        0x2   0x0003             MOVS     R3,R0
   \        0x4   0x....             LDR      R5,??DataTable7
   \        0x6   0x186C             ADDS     R4,R5,R1
   \        0x8   0x1E64             SUBS     R4,R4,#+1
   \        0xA   0x7824             LDRB     R4,[R4, #+0]
   \        0xC   0x191C             ADDS     R4,R3,R4
   \        0xE   0x186D             ADDS     R5,R5,R1
   \       0x10   0x1E6D             SUBS     R5,R5,#+1
   \       0x12   0x782D             LDRB     R5,[R5, #+0]
   \       0x14   0x195D             ADDS     R5,R3,R5
   \       0x16   0x686D             LDR      R5,[R5, #+4]
   \       0x18   0x0C2D             LSRS     R5,R5,#+16
   \       0x1A   0x042D             LSLS     R5,R5,#+16
   \       0x1C   0x4315             ORRS     R5,R5,R2
   \       0x1E   0x6065             STR      R5,[R4, #+4]
   \       0x20   0xBC30             POP      {R4,R5}
   \       0x22   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_DMA_SetMemoryAddress(DMA_TypeDef *, uint32_t, uint32_t)
   \                     LL_DMA_SetMemoryAddress: (+1)
   \        0x0   0xB410             PUSH     {R4}
   \        0x2   0x0003             MOVS     R3,R0
   \        0x4   0x....             LDR      R4,??DataTable7
   \        0x6   0x1864             ADDS     R4,R4,R1
   \        0x8   0x1E64             SUBS     R4,R4,#+1
   \        0xA   0x7824             LDRB     R4,[R4, #+0]
   \        0xC   0x191C             ADDS     R4,R3,R4
   \        0xE   0x60E2             STR      R2,[R4, #+12]
   \       0x10   0xBC10             POP      {R4}
   \       0x12   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_DMA_SetPeriphAddress(DMA_TypeDef *, uint32_t, uint32_t)
   \                     LL_DMA_SetPeriphAddress: (+1)
   \        0x0   0xB410             PUSH     {R4}
   \        0x2   0x0003             MOVS     R3,R0
   \        0x4   0x....             LDR      R4,??DataTable7
   \        0x6   0x1864             ADDS     R4,R4,R1
   \        0x8   0x1E64             SUBS     R4,R4,#+1
   \        0xA   0x7824             LDRB     R4,[R4, #+0]
   \        0xC   0x191C             ADDS     R4,R3,R4
   \        0xE   0x60A2             STR      R2,[R4, #+8]
   \       0x10   0xBC10             POP      {R4}
   \       0x12   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_DMA_SetPeriphRequest(DMA_TypeDef *, uint32_t, uint32_t)
   \                     LL_DMA_SetPeriphRequest: (+1)
   \        0x0   0xB430             PUSH     {R4,R5}
   \        0x2   0x....             LDR      R3,??DataTable7_2  ;; 0x400207fc
   \        0x4   0x2404             MOVS     R4,#+4
   \        0x6   0x434C             MULS     R4,R1,R4
   \        0x8   0x18E4             ADDS     R4,R4,R3
   \        0xA   0x6824             LDR      R4,[R4, #+0]
   \        0xC   0x25FF             MOVS     R5,#+255
   \        0xE   0x43AC             BICS     R4,R4,R5
   \       0x10   0x4314             ORRS     R4,R4,R2
   \       0x12   0x2504             MOVS     R5,#+4
   \       0x14   0x434D             MULS     R5,R1,R5
   \       0x16   0x18EB             ADDS     R3,R5,R3
   \       0x18   0x601C             STR      R4,[R3, #+0]
   \       0x1A   0xBC30             POP      {R4,R5}
   \       0x1C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_DMA_ClearFlag_GI1(DMA_TypeDef *)
   \                     LL_DMA_ClearFlag_GI1: (+1)
   \        0x0   0x2101             MOVS     R1,#+1
   \        0x2   0x6041             STR      R1,[R0, #+4]
   \        0x4   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_DMA_ClearFlag_GI2(DMA_TypeDef *)
   \                     LL_DMA_ClearFlag_GI2: (+1)
   \        0x0   0x2110             MOVS     R1,#+16
   \        0x2   0x6041             STR      R1,[R0, #+4]
   \        0x4   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_DMA_ClearFlag_GI3(DMA_TypeDef *)
   \                     LL_DMA_ClearFlag_GI3: (+1)
   \        0x0   0x2180             MOVS     R1,#+128
   \        0x2   0x0049             LSLS     R1,R1,#+1        ;; #+256
   \        0x4   0x6041             STR      R1,[R0, #+4]
   \        0x6   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_DMA_ClearFlag_GI4(DMA_TypeDef *)
   \                     LL_DMA_ClearFlag_GI4: (+1)
   \        0x0   0x2180             MOVS     R1,#+128
   \        0x2   0x0149             LSLS     R1,R1,#+5        ;; #+4096
   \        0x4   0x6041             STR      R1,[R0, #+4]
   \        0x6   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_DMA_ClearFlag_GI5(DMA_TypeDef *)
   \                     LL_DMA_ClearFlag_GI5: (+1)
   \        0x0   0x2180             MOVS     R1,#+128
   \        0x2   0x0249             LSLS     R1,R1,#+9        ;; #+65536
   \        0x4   0x6041             STR      R1,[R0, #+4]
   \        0x6   0x4770             BX       LR               ;; return
     23          #include "stm32g0xx_ll_bus.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_AHB1_GRP1_ForceReset(uint32_t)
   \                     LL_AHB1_GRP1_ForceReset: (+1)
   \        0x0   0x....             LDR      R1,??DataTable7_3  ;; 0x40021028
   \        0x2   0x680A             LDR      R2,[R1, #+0]
   \        0x4   0x4302             ORRS     R2,R2,R0
   \        0x6   0x600A             STR      R2,[R1, #+0]
   \        0x8   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LL_AHB1_GRP1_ReleaseReset(uint32_t)
   \                     LL_AHB1_GRP1_ReleaseReset: (+1)
   \        0x0   0x....             LDR      R1,??DataTable7_3  ;; 0x40021028
   \        0x2   0x680A             LDR      R2,[R1, #+0]
   \        0x4   0x4382             BICS     R2,R2,R0
   \        0x6   0x600A             STR      R2,[R1, #+0]
   \        0x8   0x4770             BX       LR               ;; return
     24          #ifdef  USE_FULL_ASSERT
     25          #include "stm32_assert.h"
     26          #else
     27          #define assert_param(expr) ((void)0U)
     28          #endif
     29          
     30          /** @addtogroup STM32G0xx_LL_Driver
     31            * @{
     32            */
     33          
     34          #if defined (DMA1)
     35          
     36          /** @defgroup DMA_LL DMA
     37            * @{
     38            */
     39          
     40          /* Private types -------------------------------------------------------------*/
     41          /* Private variables ---------------------------------------------------------*/
     42          /* Private constants ---------------------------------------------------------*/
     43          /* Private macros ------------------------------------------------------------*/
     44          /** @addtogroup DMA_LL_Private_Macros
     45            * @{
     46            */
     47          #define IS_LL_DMA_DIRECTION(__VALUE__)          (((__VALUE__) == LL_DMA_DIRECTION_PERIPH_TO_MEMORY) || \
     48                                                           ((__VALUE__) == LL_DMA_DIRECTION_MEMORY_TO_PERIPH) || \
     49                                                           ((__VALUE__) == LL_DMA_DIRECTION_MEMORY_TO_MEMORY))
     50          
     51          #define IS_LL_DMA_MODE(__VALUE__)               (((__VALUE__) == LL_DMA_MODE_NORMAL) || \
     52                                                           ((__VALUE__) == LL_DMA_MODE_CIRCULAR))
     53          
     54          #define IS_LL_DMA_PERIPHINCMODE(__VALUE__)      (((__VALUE__) == LL_DMA_PERIPH_INCREMENT) || \
     55                                                           ((__VALUE__) == LL_DMA_PERIPH_NOINCREMENT))
     56          
     57          #define IS_LL_DMA_MEMORYINCMODE(__VALUE__)      (((__VALUE__) == LL_DMA_MEMORY_INCREMENT) || \
     58                                                           ((__VALUE__) == LL_DMA_MEMORY_NOINCREMENT))
     59          
     60          #define IS_LL_DMA_PERIPHDATASIZE(__VALUE__)     (((__VALUE__) == LL_DMA_PDATAALIGN_BYTE)      || \
     61                                                           ((__VALUE__) == LL_DMA_PDATAALIGN_HALFWORD)  || \
     62                                                           ((__VALUE__) == LL_DMA_PDATAALIGN_WORD))
     63          
     64          #define IS_LL_DMA_MEMORYDATASIZE(__VALUE__)     (((__VALUE__) == LL_DMA_MDATAALIGN_BYTE)      || \
     65                                                           ((__VALUE__) == LL_DMA_MDATAALIGN_HALFWORD)  || \
     66                                                           ((__VALUE__) == LL_DMA_MDATAALIGN_WORD))
     67          
     68          #define IS_LL_DMA_NBDATA(__VALUE__)             ((__VALUE__)  <= 0x0000FFFFU)
     69          
     70          #if defined(STM32G081xx)||defined(STM32G071xx)
     71          #define IS_LL_DMA_PERIPHREQUEST(__VALUE__)      ((__VALUE__) <= LL_DMAMUX_REQ_UCPD2_TX)
     72          #elif defined(STM32G070xx)
     73          #define IS_LL_DMA_PERIPHREQUEST(__VALUE__)      ((__VALUE__) <= LL_DMAMUX_REQ_USART4_TX)
     74          #elif defined(STM32G041xx)||defined(STM32G031xx)||defined(STM32G030xx)
     75          #define IS_LL_DMA_PERIPHREQUEST(__VALUE__)      ((__VALUE__) <= LL_DMAMUX_REQ_USART2_TX)
     76          #endif
     77          
     78          #define IS_LL_DMA_PRIORITY(__VALUE__)           (((__VALUE__) == LL_DMA_PRIORITY_LOW)    || \
     79                                                           ((__VALUE__) == LL_DMA_PRIORITY_MEDIUM) || \
     80                                                           ((__VALUE__) == LL_DMA_PRIORITY_HIGH)   || \
     81                                                           ((__VALUE__) == LL_DMA_PRIORITY_VERYHIGH))
     82          
     83          #if defined(STM32G081xx) ||  defined(STM32G071xx) || defined(STM32G070xx)
     84          #define IS_LL_DMA_ALL_CHANNEL_INSTANCE(INSTANCE, CHANNEL)  ((((INSTANCE) == DMA1) && \
     85                                                                      (((CHANNEL) == LL_DMA_CHANNEL_1) || \
     86                                                                       ((CHANNEL) == LL_DMA_CHANNEL_2) || \
     87                                                                       ((CHANNEL) == LL_DMA_CHANNEL_3) || \
     88                                                                       ((CHANNEL) == LL_DMA_CHANNEL_4) || \
     89                                                                       ((CHANNEL) == LL_DMA_CHANNEL_5) || \
     90                                                                       ((CHANNEL) == LL_DMA_CHANNEL_6) || \
     91                                                                       ((CHANNEL) == LL_DMA_CHANNEL_7))))
     92          #elif defined(STM32G041xx) ||  defined(STM32G031xx) || defined(STM32G030xx)
     93          #define IS_LL_DMA_ALL_CHANNEL_INSTANCE(INSTANCE, CHANNEL)  ((((INSTANCE) == DMA1) && \
     94                                                                      (((CHANNEL) == LL_DMA_CHANNEL_1) || \
     95                                                                       ((CHANNEL) == LL_DMA_CHANNEL_2) || \
     96                                                                       ((CHANNEL) == LL_DMA_CHANNEL_3) || \
     97                                                                       ((CHANNEL) == LL_DMA_CHANNEL_4) || \
     98                                                                       ((CHANNEL) == LL_DMA_CHANNEL_5))))
     99          #endif
    100          /**
    101            * @}
    102            */
    103          
    104          /* Private function prototypes -----------------------------------------------*/
    105          
    106          /* Exported functions --------------------------------------------------------*/
    107          /** @addtogroup DMA_LL_Exported_Functions
    108            * @{
    109            */
    110          
    111          /** @addtogroup DMA_LL_EF_Init
    112            * @{
    113            */
    114          
    115          /**
    116            * @brief  De-initialize the DMA registers to their default reset values.
    117            * @param  DMAx DMAx Instance
    118            * @param  Channel This parameter can be one of the following values:
    119            *         @arg @ref LL_DMA_CHANNEL_1
    120            *         @arg @ref LL_DMA_CHANNEL_2
    121            *         @arg @ref LL_DMA_CHANNEL_3
    122            *         @arg @ref LL_DMA_CHANNEL_4
    123            *         @arg @ref LL_DMA_CHANNEL_5
    124            *         @arg @ref LL_DMA_CHANNEL_6
    125            *         @arg @ref LL_DMA_CHANNEL_7
    126            *         @arg @ref LL_DMA_CHANNEL_ALL
    127            * @retval An ErrorStatus enumeration value:
    128            *          - SUCCESS: DMA registers are de-initialized
    129            *          - ERROR: DMA registers are not de-initialized
    130            */

   \                                 In section .text, align 2, keep-with-next
    131          ErrorStatus LL_DMA_DeInit(DMA_TypeDef *DMAx, uint32_t Channel)
    132          {
   \                     LL_DMA_DeInit: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0006             MOVS     R6,R0
   \        0x4   0x000D             MOVS     R5,R1
    133            ErrorStatus status = SUCCESS;
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0x0007             MOVS     R7,R0
    134          
    135            /* Check the DMA Instance DMAx and Channel parameters*/
    136            assert_param(IS_LL_DMA_ALL_CHANNEL_INSTANCE(DMAx, Channel) || (Channel == LL_DMA_CHANNEL_ALL));
    137          
    138            if (Channel == LL_DMA_CHANNEL_ALL)
   \        0xA   0x....             LDR      R1,??DataTable7_4  ;; 0xffff0000
   \        0xC   0x428D             CMP      R5,R1
   \        0xE   0xD10C             BNE      ??LL_DMA_DeInit_0
    139            {
    140              if (DMAx == DMA1)
   \       0x10   0x....             LDR      R0,??DataTable7_5  ;; 0x40020000
   \       0x12   0x4286             CMP      R6,R0
   \       0x14   0xD106             BNE      ??LL_DMA_DeInit_1
    141              {
    142                /* Force reset of DMA clock */
    143                LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_DMA1);
   \       0x16   0x2001             MOVS     R0,#+1
   \       0x18   0x....'....        BL       LL_AHB1_GRP1_ForceReset
    144          
    145                /* Release reset of DMA clock */
    146                LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_DMA1);
   \       0x1C   0x2001             MOVS     R0,#+1
   \       0x1E   0x....'....        BL       LL_AHB1_GRP1_ReleaseReset
   \       0x22   0xE049             B        ??LL_DMA_DeInit_2
    147              }
    148          #if defined(DMA2)
    149              else if (DMAx == DMA2)
    150              {
    151                /* Force reset of DMA clock */
    152                LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_DMA2);
    153          
    154                /* Release reset of DMA clock */
    155                LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_DMA2);
    156              }
    157          #endif
    158              else
    159              {
    160                status = ERROR;
   \                     ??LL_DMA_DeInit_1: (+1)
   \       0x24   0x2001             MOVS     R0,#+1
   \       0x26   0x0007             MOVS     R7,R0
   \       0x28   0xE046             B        ??LL_DMA_DeInit_2
    161              }
    162            }
    163            else
    164            {
    165              DMA_Channel_TypeDef *tmp;
    166          
    167              tmp = (DMA_Channel_TypeDef *)(__LL_DMA_GET_CHANNEL_INSTANCE(DMAx, Channel));
   \                     ??LL_DMA_DeInit_0: (+1)
   \       0x2A   0x....             LDR      R1,??DataTable7_5  ;; 0x40020000
   \       0x2C   0x428E             CMP      R6,R1
   \       0x2E   0xD103             BNE      ??LL_DMA_DeInit_3
   \       0x30   0x2D01             CMP      R5,#+1
   \       0x32   0xD101             BNE      ??LL_DMA_DeInit_3
   \       0x34   0x....             LDR      R4,??DataTable7_6  ;; 0x40020008
   \       0x36   0xE012             B        ??LL_DMA_DeInit_4
   \                     ??LL_DMA_DeInit_3: (+1)
   \       0x38   0x428E             CMP      R6,R1
   \       0x3A   0xD103             BNE      ??LL_DMA_DeInit_5
   \       0x3C   0x2D02             CMP      R5,#+2
   \       0x3E   0xD101             BNE      ??LL_DMA_DeInit_5
   \       0x40   0x....             LDR      R4,??DataTable7_7  ;; 0x4002001c
   \       0x42   0xE00C             B        ??LL_DMA_DeInit_4
   \                     ??LL_DMA_DeInit_5: (+1)
   \       0x44   0x428E             CMP      R6,R1
   \       0x46   0xD103             BNE      ??LL_DMA_DeInit_6
   \       0x48   0x2D03             CMP      R5,#+3
   \       0x4A   0xD101             BNE      ??LL_DMA_DeInit_6
   \       0x4C   0x....             LDR      R4,??DataTable7_8  ;; 0x40020030
   \       0x4E   0xE006             B        ??LL_DMA_DeInit_4
   \                     ??LL_DMA_DeInit_6: (+1)
   \       0x50   0x428E             CMP      R6,R1
   \       0x52   0xD103             BNE      ??LL_DMA_DeInit_7
   \       0x54   0x2D04             CMP      R5,#+4
   \       0x56   0xD101             BNE      ??LL_DMA_DeInit_7
   \       0x58   0x....             LDR      R4,??DataTable7_9  ;; 0x40020044
   \       0x5A   0xE000             B        ??LL_DMA_DeInit_4
   \                     ??LL_DMA_DeInit_7: (+1)
   \       0x5C   0x....             LDR      R4,??DataTable7_10  ;; 0x40020058
    168          
    169              /* Disable the selected DMAx_Channely */
    170              CLEAR_BIT(tmp->CCR, DMA_CCR_EN);
   \                     ??LL_DMA_DeInit_4: (+1)
   \       0x5E   0x6821             LDR      R1,[R4, #+0]
   \       0x60   0x2201             MOVS     R2,#+1
   \       0x62   0x4391             BICS     R1,R1,R2
   \       0x64   0x6021             STR      R1,[R4, #+0]
    171          
    172              /* Reset DMAx_Channely control register */
    173              WRITE_REG(tmp->CCR, 0U);
   \       0x66   0x6020             STR      R0,[R4, #+0]
    174          
    175              /* Reset DMAx_Channely remaining bytes register */
    176              WRITE_REG(tmp->CNDTR, 0U);
   \       0x68   0x6060             STR      R0,[R4, #+4]
    177          
    178              /* Reset DMAx_Channely peripheral address register */
    179              WRITE_REG(tmp->CPAR, 0U);
   \       0x6A   0x60A0             STR      R0,[R4, #+8]
    180          
    181              /* Reset DMAx_Channely memory address register */
    182              WRITE_REG(tmp->CMAR, 0U);
   \       0x6C   0x60E0             STR      R0,[R4, #+12]
    183          
    184              /* Reset Request register field for DMAx Channel */
    185              LL_DMA_SetPeriphRequest(DMAx, Channel, LL_DMAMUX_REQ_MEM2MEM);
   \       0x6E   0x2200             MOVS     R2,#+0
   \       0x70   0x0029             MOVS     R1,R5
   \       0x72   0x0030             MOVS     R0,R6
   \       0x74   0x....'....        BL       LL_DMA_SetPeriphRequest
    186          
    187              if (Channel == LL_DMA_CHANNEL_1)
   \       0x78   0x2D01             CMP      R5,#+1
   \       0x7A   0xD103             BNE      ??LL_DMA_DeInit_8
    188              {
    189                /* Reset interrupt pending bits for DMAx Channel1 */
    190                LL_DMA_ClearFlag_GI1(DMAx);
   \       0x7C   0x0030             MOVS     R0,R6
   \       0x7E   0x....'....        BL       LL_DMA_ClearFlag_GI1
   \       0x82   0xE019             B        ??LL_DMA_DeInit_2
    191              }
    192              else if (Channel == LL_DMA_CHANNEL_2)
   \                     ??LL_DMA_DeInit_8: (+1)
   \       0x84   0x2D02             CMP      R5,#+2
   \       0x86   0xD103             BNE      ??LL_DMA_DeInit_9
    193              {
    194                /* Reset interrupt pending bits for DMAx Channel2 */
    195                LL_DMA_ClearFlag_GI2(DMAx);
   \       0x88   0x0030             MOVS     R0,R6
   \       0x8A   0x....'....        BL       LL_DMA_ClearFlag_GI2
   \       0x8E   0xE013             B        ??LL_DMA_DeInit_2
    196              }
    197              else if (Channel == LL_DMA_CHANNEL_3)
   \                     ??LL_DMA_DeInit_9: (+1)
   \       0x90   0x2D03             CMP      R5,#+3
   \       0x92   0xD103             BNE      ??LL_DMA_DeInit_10
    198              {
    199                /* Reset interrupt pending bits for DMAx Channel3 */
    200                LL_DMA_ClearFlag_GI3(DMAx);
   \       0x94   0x0030             MOVS     R0,R6
   \       0x96   0x....'....        BL       LL_DMA_ClearFlag_GI3
   \       0x9A   0xE00D             B        ??LL_DMA_DeInit_2
    201              }
    202              else if (Channel == LL_DMA_CHANNEL_4)
   \                     ??LL_DMA_DeInit_10: (+1)
   \       0x9C   0x2D04             CMP      R5,#+4
   \       0x9E   0xD103             BNE      ??LL_DMA_DeInit_11
    203              {
    204                /* Reset interrupt pending bits for DMAx Channel4 */
    205                LL_DMA_ClearFlag_GI4(DMAx);
   \       0xA0   0x0030             MOVS     R0,R6
   \       0xA2   0x....'....        BL       LL_DMA_ClearFlag_GI4
   \       0xA6   0xE007             B        ??LL_DMA_DeInit_2
    206              }
    207              else if (Channel == LL_DMA_CHANNEL_5)
   \                     ??LL_DMA_DeInit_11: (+1)
   \       0xA8   0x2D05             CMP      R5,#+5
   \       0xAA   0xD103             BNE      ??LL_DMA_DeInit_12
    208              {
    209                /* Reset interrupt pending bits for DMAx Channel5 */
    210                LL_DMA_ClearFlag_GI5(DMAx);
   \       0xAC   0x0030             MOVS     R0,R6
   \       0xAE   0x....'....        BL       LL_DMA_ClearFlag_GI5
   \       0xB2   0xE001             B        ??LL_DMA_DeInit_2
    211              }
    212          #if defined(LL_DMA_CHANNEL_6)
    213              else if (Channel == LL_DMA_CHANNEL_6)
    214              {
    215                /* Reset interrupt pending bits for DMAx Channel6 */
    216                LL_DMA_ClearFlag_GI6(DMAx);
    217              }
    218          #endif /* LL_DMA_CHANNEL_6 */
    219          #if defined(LL_DMA_CHANNEL_7)
    220              else if (Channel == LL_DMA_CHANNEL_7)
    221              {
    222                /* Reset interrupt pending bits for DMAx Channel7 */
    223                LL_DMA_ClearFlag_GI7(DMAx);
    224              }
    225          #endif /* LL_DMA_CHANNEL_7 */
    226              else
    227              {
    228                status = ERROR;
   \                     ??LL_DMA_DeInit_12: (+1)
   \       0xB4   0x2001             MOVS     R0,#+1
   \       0xB6   0x0007             MOVS     R7,R0
    229              }
    230            }
    231          
    232            return status;
   \                     ??LL_DMA_DeInit_2: (+1)
   \       0xB8   0x0038             MOVS     R0,R7
   \       0xBA   0xB2C0             UXTB     R0,R0
   \       0xBC   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    233          }
    234          
    235          /**
    236            * @brief  Initialize the DMA registers according to the specified parameters in DMA_InitStruct.
    237            * @note   To convert DMAx_Channely Instance to DMAx Instance and Channely, use helper macros :
    238            *         @arg @ref __LL_DMA_GET_INSTANCE
    239            *         @arg @ref __LL_DMA_GET_CHANNEL
    240            * @param  DMAx DMAx Instance
    241            * @param  Channel This parameter can be one of the following values:
    242            *         @arg @ref LL_DMA_CHANNEL_1
    243            *         @arg @ref LL_DMA_CHANNEL_2
    244            *         @arg @ref LL_DMA_CHANNEL_3
    245            *         @arg @ref LL_DMA_CHANNEL_4
    246            *         @arg @ref LL_DMA_CHANNEL_5
    247            *         @arg @ref LL_DMA_CHANNEL_6
    248            *         @arg @ref LL_DMA_CHANNEL_7
    249            * @param  DMA_InitStruct pointer to a @ref LL_DMA_InitTypeDef structure.
    250            * @retval An ErrorStatus enumeration value:
    251            *          - SUCCESS: DMA registers are initialized
    252            *          - ERROR: Not applicable
    253            */

   \                                 In section .text, align 2, keep-with-next
    254          ErrorStatus LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
    255          {
   \                     LL_DMA_Init: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0006             MOVS     R6,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x0014             MOVS     R4,R2
    256            /* Check the DMA Instance DMAx and Channel parameters*/
    257            assert_param(IS_LL_DMA_ALL_CHANNEL_INSTANCE(DMAx, Channel));
    258          
    259            /* Check the DMA parameters from DMA_InitStruct */
    260            assert_param(IS_LL_DMA_DIRECTION(DMA_InitStruct->Direction));
    261            assert_param(IS_LL_DMA_MODE(DMA_InitStruct->Mode));
    262            assert_param(IS_LL_DMA_PERIPHINCMODE(DMA_InitStruct->PeriphOrM2MSrcIncMode));
    263            assert_param(IS_LL_DMA_MEMORYINCMODE(DMA_InitStruct->MemoryOrM2MDstIncMode));
    264            assert_param(IS_LL_DMA_PERIPHDATASIZE(DMA_InitStruct->PeriphOrM2MSrcDataSize));
    265            assert_param(IS_LL_DMA_MEMORYDATASIZE(DMA_InitStruct->MemoryOrM2MDstDataSize));
    266            assert_param(IS_LL_DMA_NBDATA(DMA_InitStruct->NbData));
    267            assert_param(IS_LL_DMA_PERIPHREQUEST(DMA_InitStruct->PeriphRequest));
    268            assert_param(IS_LL_DMA_PRIORITY(DMA_InitStruct->Priority));
    269          
    270            /*---------------------------- DMAx CCR Configuration ------------------------
    271             * Configure DMAx_Channely: data transfer direction, data transfer mode,
    272             *                          peripheral and memory increment mode,
    273             *                          data size alignment and  priority level with parameters :
    274             * - Direction:      DMA_CCR_DIR and DMA_CCR_MEM2MEM bits
    275             * - Mode:           DMA_CCR_CIRC bit
    276             * - PeriphOrM2MSrcIncMode:  DMA_CCR_PINC bit
    277             * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
    278             * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
    279             * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
    280             * - Priority:               DMA_CCR_PL[1:0] bits
    281             */
    282            LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
    283                                  DMA_InitStruct->Mode                   | \
    284                                  DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
    285                                  DMA_InitStruct->MemoryOrM2MDstIncMode  | \
    286                                  DMA_InitStruct->PeriphOrM2MSrcDataSize | \
    287                                  DMA_InitStruct->MemoryOrM2MDstDataSize | \
    288                                  DMA_InitStruct->Priority);
   \        0x8   0x68A0             LDR      R0,[R4, #+8]
   \        0xA   0x68E1             LDR      R1,[R4, #+12]
   \        0xC   0x4301             ORRS     R1,R1,R0
   \        0xE   0x6920             LDR      R0,[R4, #+16]
   \       0x10   0x4308             ORRS     R0,R0,R1
   \       0x12   0x6961             LDR      R1,[R4, #+20]
   \       0x14   0x4301             ORRS     R1,R1,R0
   \       0x16   0x69A0             LDR      R0,[R4, #+24]
   \       0x18   0x4308             ORRS     R0,R0,R1
   \       0x1A   0x69E1             LDR      R1,[R4, #+28]
   \       0x1C   0x4301             ORRS     R1,R1,R0
   \       0x1E   0x6AA2             LDR      R2,[R4, #+40]
   \       0x20   0x430A             ORRS     R2,R2,R1
   \       0x22   0x0029             MOVS     R1,R5
   \       0x24   0x0030             MOVS     R0,R6
   \       0x26   0x....'....        BL       LL_DMA_ConfigTransfer
    289          
    290            /*-------------------------- DMAx CMAR Configuration -------------------------
    291             * Configure the memory or destination base address with parameter :
    292             * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
    293             */
    294            LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
   \       0x2A   0x6862             LDR      R2,[R4, #+4]
   \       0x2C   0x0029             MOVS     R1,R5
   \       0x2E   0x0030             MOVS     R0,R6
   \       0x30   0x....'....        BL       LL_DMA_SetMemoryAddress
    295          
    296            /*-------------------------- DMAx CPAR Configuration -------------------------
    297             * Configure the peripheral or source base address with parameter :
    298             * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
    299             */
    300            LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
   \       0x34   0x6822             LDR      R2,[R4, #+0]
   \       0x36   0x0029             MOVS     R1,R5
   \       0x38   0x0030             MOVS     R0,R6
   \       0x3A   0x....'....        BL       LL_DMA_SetPeriphAddress
    301          
    302            /*--------------------------- DMAx CNDTR Configuration -----------------------
    303             * Configure the peripheral base address with parameter :
    304             * - NbData: DMA_CNDTR_NDT[15:0] bits
    305             */
    306            LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
   \       0x3E   0x6A22             LDR      R2,[R4, #+32]
   \       0x40   0x0029             MOVS     R1,R5
   \       0x42   0x0030             MOVS     R0,R6
   \       0x44   0x....'....        BL       LL_DMA_SetDataLength
    307          
    308            /*--------------------------- DMAMUXx CCR Configuration ----------------------
    309             * Configure the DMA request for DMA Channels on DMAMUX Channel x with parameter :
    310             * - PeriphRequest: DMA_CxCR[7:0] bits
    311             */
    312            LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
   \       0x48   0x6A62             LDR      R2,[R4, #+36]
   \       0x4A   0x0029             MOVS     R1,R5
   \       0x4C   0x0030             MOVS     R0,R6
   \       0x4E   0x....'....        BL       LL_DMA_SetPeriphRequest
    313          
    314            return SUCCESS;
   \       0x52   0x2000             MOVS     R0,#+0
   \       0x54   0xBD70             POP      {R4-R6,PC}       ;; return
    315          }
    316          
    317          /**
    318            * @brief  Set each @ref LL_DMA_InitTypeDef field to default value.
    319            * @param  DMA_InitStruct Pointer to a @ref LL_DMA_InitTypeDef structure.
    320            * @retval None
    321            */

   \                                 In section .text, align 2, keep-with-next
    322          void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
    323          {
    324            /* Set DMA_InitStruct fields to default values */
    325            DMA_InitStruct->PeriphOrM2MSrcAddress  = 0x00000000U;
   \                     LL_DMA_StructInit: (+1)
   \        0x0   0x2100             MOVS     R1,#+0
   \        0x2   0x6001             STR      R1,[R0, #+0]
    326            DMA_InitStruct->MemoryOrM2MDstAddress  = 0x00000000U;
   \        0x4   0x6041             STR      R1,[R0, #+4]
    327            DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
   \        0x6   0x6081             STR      R1,[R0, #+8]
    328            DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
   \        0x8   0x60C1             STR      R1,[R0, #+12]
    329            DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
   \        0xA   0x6101             STR      R1,[R0, #+16]
    330            DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
   \        0xC   0x6141             STR      R1,[R0, #+20]
    331            DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
   \        0xE   0x6181             STR      R1,[R0, #+24]
    332            DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
   \       0x10   0x61C1             STR      R1,[R0, #+28]
    333            DMA_InitStruct->NbData                 = 0x00000000U;
   \       0x12   0x6201             STR      R1,[R0, #+32]
    334            DMA_InitStruct->PeriphRequest          = LL_DMAMUX_REQ_MEM2MEM;
   \       0x14   0x6241             STR      R1,[R0, #+36]
    335            DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
   \       0x16   0x6281             STR      R1,[R0, #+40]
    336          }
   \       0x18   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \        0x0   0x....'....        DC32     CHANNEL_OFFSET_TAB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \        0x0   0xFFFF'800F        DC32     0xffff800f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \        0x0   0x4002'07FC        DC32     0x400207fc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \        0x0   0x4002'1028        DC32     0x40021028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \        0x0   0xFFFF'0000        DC32     0xffff0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \        0x0   0x4002'0000        DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \        0x0   0x4002'0008        DC32     0x40020008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \        0x0   0x4002'001C        DC32     0x4002001c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \        0x0   0x4002'0030        DC32     0x40020030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \        0x0   0x4002'0044        DC32     0x40020044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \        0x0   0x4002'0058        DC32     0x40020058
    337          
    338          /**
    339            * @}
    340            */
    341          
    342          /**
    343            * @}
    344            */
    345          
    346          /**
    347            * @}
    348            */
    349          
    350          #endif /* DMA1 */
    351          
    352          /**
    353            * @}
    354            */
    355          
    356          #endif /* USE_FULL_LL_DRIVER */
    357          
    358          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   LL_AHB1_GRP1_ForceReset
       0   LL_AHB1_GRP1_ReleaseReset
       0   LL_DMA_ClearFlag_GI1
       0   LL_DMA_ClearFlag_GI2
       0   LL_DMA_ClearFlag_GI3
       0   LL_DMA_ClearFlag_GI4
       0   LL_DMA_ClearFlag_GI5
      12   LL_DMA_ConfigTransfer
      24   LL_DMA_DeInit
        24   -> LL_AHB1_GRP1_ForceReset
        24   -> LL_AHB1_GRP1_ReleaseReset
        24   -> LL_DMA_ClearFlag_GI1
        24   -> LL_DMA_ClearFlag_GI2
        24   -> LL_DMA_ClearFlag_GI3
        24   -> LL_DMA_ClearFlag_GI4
        24   -> LL_DMA_ClearFlag_GI5
        24   -> LL_DMA_SetPeriphRequest
      16   LL_DMA_Init
        16   -> LL_DMA_ConfigTransfer
        16   -> LL_DMA_SetDataLength
        16   -> LL_DMA_SetMemoryAddress
        16   -> LL_DMA_SetPeriphAddress
        16   -> LL_DMA_SetPeriphRequest
       8   LL_DMA_SetDataLength
       4   LL_DMA_SetMemoryAddress
       4   LL_DMA_SetPeriphAddress
       8   LL_DMA_SetPeriphRequest
       0   LL_DMA_StructInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
       8  CHANNEL_OFFSET_TAB
      10  LL_AHB1_GRP1_ForceReset
      10  LL_AHB1_GRP1_ReleaseReset
       6  LL_DMA_ClearFlag_GI1
       6  LL_DMA_ClearFlag_GI2
       8  LL_DMA_ClearFlag_GI3
       8  LL_DMA_ClearFlag_GI4
       8  LL_DMA_ClearFlag_GI5
      36  LL_DMA_ConfigTransfer
     190  LL_DMA_DeInit
      86  LL_DMA_Init
      36  LL_DMA_SetDataLength
      20  LL_DMA_SetMemoryAddress
      20  LL_DMA_SetPeriphAddress
      30  LL_DMA_SetPeriphRequest
      26  LL_DMA_StructInit

 
   8 bytes in section .rodata
 544 bytes in section .text
 
 544 bytes of CODE  memory
   8 bytes of CONST memory

Errors: none
Warnings: none
